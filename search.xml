<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[SparkSQL转CSV为parquet文件]]></title>
      <url>https://laneypeng.github.io/2016/06/08/SparkSQL%E5%B0%86CSV%E8%BD%AC%E4%B8%BAparquet%E6%96%87%E4%BB%B6/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spark架构基础]]></title>
      <url>https://laneypeng.github.io/2016/06/08/Spark%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[Storm可靠性与容错机制]]></title>
      <url>https://laneypeng.github.io/2016/06/08/Storm%E7%9A%84%E5%8F%AF%E9%9D%A0%E5%AE%B9%E9%94%99%E6%9C%BA%E5%88%B6/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[Storm架构基础]]></title>
      <url>https://laneypeng.github.io/2016/06/08/Storm%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[Kafka命令行使用]]></title>
      <url>https://laneypeng.github.io/2016/06/08/Kafka%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h3 id="创建Topic"><a href="#创建Topic" class="headerlink" title="创建Topic"></a>创建Topic</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ bin/kafka-topics.sh --create --topic <span class="built_in">test</span> --replication-factor 1 --partitions 4 </span><br><span class="line">  --zookeeper dpnode03:2181,dpnode04:2181,dpnode05:2181</span><br></pre></td></tr></table></figure>
<p>这里创建了一个test消息队列，副本为2，分区为4。</p>
<h3 id="查看Topic属性"><a href="#查看Topic属性" class="headerlink" title="查看Topic属性"></a>查看Topic属性</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bin/kafka-topics.sh --zookeeper dpnode03:2181,dpnode04,dpnode05 --describe --topic <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="/img/kafka-topic-describe.jpg" alt=""><br>Topic：消息名称<br>Partition：分区号。下标从0开始。<br>Leader：所在分区的broker编号，负责处理消息的读写。leader是从所有节点中随机选择的。<br>Replicas：列出了所有的副本节点，不管节点是否在服务中。<br>Isr：正在服务中的节点。</p>
<h3 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ bin/kafka-console-producer.sh --broker-list dpnode05:6667 --topic <span class="built_in">test</span></span><br><span class="line">This is the first message</span><br></pre></td></tr></table></figure>
<p>输入一行内容按回车</p>
<h3 id="消费消息"><a href="#消费消息" class="headerlink" title="消费消息"></a>消费消息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ bin/kafka-console-consumer.sh --zookeeper dpnode03,dpnode04,dpnode05:2181 --topic <span class="built_in">test</span></span><br><span class="line">  --from-beginning</span><br></pre></td></tr></table></figure>
<h3 id="列举所有Topic"><a href="#列举所有Topic" class="headerlink" title="列举所有Topic"></a>列举所有Topic</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bin/kafka-topics.sh --zookeeper dpnode03:2181,dpnode04:2181,dpnode05 --list</span><br></pre></td></tr></table></figure>
<h3 id="删除Topic"><a href="#删除Topic" class="headerlink" title="删除Topic"></a>删除Topic</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Map LinkedHashMap]]></title>
      <url>https://laneypeng.github.io/2016/06/07/Map%E4%B8%ADLinkedHashMap%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p>　　LinkedHashMap继承了HashMap、实现了Map接口，是hash表和链表的双重结合。它的底层实现是Map，采用的hash算法和HashMap相同，但是它重新定义了数组中保存的元素Entry，该Entry除了保存当前对象的引用外，还保存了其上一个元素before和下一个元素after的引用，从而在哈希表的基础上又构成了双向链接列表，此链表定义了迭代顺序，包括插入顺序和访问顺序。<br>　　这里介绍它的基础、用法实例和LRU缓存实践。<br><a id="more"></a></p>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h3><p>　　LinkedHashMap有五种构造方式：</p>
<blockquote>
<p>1.　<strong>new LinkedHashMap();</strong><br>2.　<strong>new LinkedHashMap(int initialCapacity);</strong>　☆<br>3.　<strong>new LinkedHashMap(int initialCapacity, float loadFactor);</strong><br>4.　<strong>new LinkedHashMap(int initialCapacity, float loadFactor, boolean accessOrder);</strong>　☆<br>5.　<strong>new LinkedHashMap(Map&lt;? extends K, ? extends V&gt; m);</strong></p>
</blockquote>
<p>第一种是无参构造：父类默认大小16，因子0.75；默认accessOrder为false（表示迭代插入顺序）<br>第二种定义初始大小的构造：父类默认因子0.75；默认accessOrder为false。<br>第三种定义初始大小和加载因子（一般仍然给定0.75），默认accessOrder为false。<br>第四种定义初始大小、加载因子，自定义迭代顺序：true表示按访问顺序，false表示按插入顺序。<br>第五中将给定的Map转为LinkedHashMap。<br>　　HashMap的构造器最后会调用init()方法，进行相关的初始化，这个方法在HashMap的实现中并无意义，只是提供给子类实现相关的初始化调用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                               loadFactor);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">        threshold = initialCapacity;</span><br><span class="line">        init();   <span class="comment">//最后进行初始化</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>　　LinkedHashMap重写了init()方法，在调用父类的构造方法完成构造后，进一步实现了对其元素Entry的初始化操作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        header = <span class="keyword">new</span> Entry&lt;&gt;(-<span class="number">1</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        header.before = header.after = header;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Entry元素"><a href="#Entry元素" class="headerlink" title="Entry元素"></a>Entry<k,v>元素</k,v></h3><p>　　LinkedHashMap中<code>Entry&lt;K,V&gt;</code>元素继承了HashMap的Entry并进行了重定义，每个Entry结构都维护了相应的before Entry和after Entry元素<code>Entry&lt;K,V&gt; before, after;</code> 。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 双向链表表头元素.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;K,V&gt; header;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * LinkedHashMap的Entry元素。 </span><br><span class="line"> * 继承HashMap的Entry元素，又保存了其上一个元素before和下一个元素after的引用。</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// These fields comprise the doubly linked list used for iteration.</span></span><br><span class="line">    Entry&lt;K,V&gt; before, after;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="put写操作"><a href="#put写操作" class="headerlink" title="put写操作"></a>put写操作</h3><p>　　LinkedHashMap并未重写父类HashMap的put方法，而是重写了父类HashMap的put方法调用的子方法void recordAccess(HashMap m),void addEntry(int hash, K key, V value, int bucketIndex)和void createEntry(int hash, K key, V value, int bucketIndex)提供了自己特有的双向链接列表的实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;  </span><br><span class="line">    <span class="comment">// 调用create方法，将新元素以双向链表的的形式加入到映射中。  </span></span><br><span class="line">    createEntry(hash, key, value, bucketIndex);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 删除最近最少使用元素的策略定义  </span></span><br><span class="line">    Entry&lt;K,V&gt; eldest = header.after;  </span><br><span class="line">    <span class="keyword">if</span> (removeEldestEntry(eldest)) &#123;  </span><br><span class="line">        removeEntryForKey(eldest.key);  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (size &gt;= threshold)  </span><br><span class="line">            resize(<span class="number">2</span> * table.length);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;  </span><br><span class="line">    HashMap.Entry&lt;K,V&gt; old = table[bucketIndex];  </span><br><span class="line">    Entry&lt;K,V&gt; e = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, old);  </span><br><span class="line">    table[bucketIndex] = e;  </span><br><span class="line">    <span class="comment">// 调用元素的addBrefore方法，将元素加入到哈希、双向链接列表。  </span></span><br><span class="line">    e.addBefore(header);  </span><br><span class="line">    size++;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addBefore</span><span class="params">(Entry&lt;K,V&gt; existingEntry)</span> </span>&#123;  </span><br><span class="line">    after  = existingEntry;  </span><br><span class="line">    before = existingEntry.before;  </span><br><span class="line">    before.after = <span class="keyword">this</span>;  </span><br><span class="line">    after.before = <span class="keyword">this</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下图展示了从初始化LinkedHashMap–&gt;添加Entry e1 –&gt;添加Entry e2时，LinkedHashMap结构的变化。<br><img src="/img/linkedhashmap-add.jpg" alt=""></p>
<h3 id="get读操作"><a href="#get读操作" class="headerlink" title="get读操作"></a>get读操作</h3><p>　　LinkedHashMap重写了父类HashMap的get方法，实际在调用父类getEntry()方法取得查找的元素后，再判断当排序模式accessOrder为true时，记录访问顺序，将最新访问的元素添加到双向链表的表头，并从原来的位置删除。由于的链表的增加、删除操作是常量级的，故并不会带来性能的损失。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;  </span><br><span class="line">    <span class="comment">// 调用父类HashMap的getEntry()方法，取得要查找的元素。  </span></span><br><span class="line">    Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;)getEntry(key);  </span><br><span class="line">    <span class="keyword">if</span> (e == <span class="keyword">null</span>)  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">    <span class="comment">// 记录访问顺序。  </span></span><br><span class="line">    e.recordAccess(<span class="keyword">this</span>);  </span><br><span class="line">    <span class="keyword">return</span> e.value;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recordAccess</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;  </span><br><span class="line">    LinkedHashMap&lt;K,V&gt; lm = (LinkedHashMap&lt;K,V&gt;)m;  </span><br><span class="line">    <span class="comment">// 如果定义了LinkedHashMap的迭代顺序为访问顺序，  </span></span><br><span class="line">    <span class="comment">// 则删除以前位置上的元素，并将最新访问的元素添加到链表表头。  </span></span><br><span class="line">    <span class="keyword">if</span> (lm.accessOrder) &#123;  </span><br><span class="line">        lm.modCount++;  </span><br><span class="line">        remove();  </span><br><span class="line">        addBefore(lm.header);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Demo实例"><a href="#Demo实例" class="headerlink" title="Demo实例"></a>Demo实例</h2><h3 id="默认按插入顺序进行迭代"><a href="#默认按插入顺序进行迭代" class="headerlink" title="默认按插入顺序进行迭代"></a>默认按插入顺序进行迭代</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String,Integer&gt; lhmp = <span class="keyword">new</span> LinkedHashMap&lt;String, Integer&gt;();</span><br><span class="line">        lhmp.put(<span class="string">"Chinese"</span>, <span class="number">80</span>);</span><br><span class="line">        lhmp.put(<span class="string">"Math"</span>,    <span class="number">85</span>);</span><br><span class="line">        lhmp.put(<span class="string">"English"</span>, <span class="number">90</span>);</span><br><span class="line">        lhmp.put(<span class="string">"Science"</span>, <span class="number">95</span>);</span><br><span class="line"></span><br><span class="line">        Iterator iter = lhmp.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">            Map.Entry entry = (Map.Entry) iter.next();</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">" : "</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<blockquote>
<p>Chinese : 80<br>Math : 85<br>English : 90<br>Science : 95</p>
</blockquote>
<h3 id="定义按访问顺序迭代"><a href="#定义按访问顺序迭代" class="headerlink" title="定义按访问顺序迭代"></a>定义按访问顺序迭代</h3><p>LinkedHashMap 定义了排序模式<code>accessOrder</code>，该属性为boolean型变量，对于访问顺序，为true,对于插入顺序，则为false。一般情况下，不必指定排序模式，其迭代顺序即为默认为插入顺序。这里自定义true。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Integer&gt; lhmap = <span class="keyword">new</span> LinkedHashMap&lt;String, Integer&gt;(<span class="number">16</span>,<span class="number">0.75f</span>,<span class="keyword">true</span>);</span><br><span class="line">        lhmap.put(<span class="string">"Chinese"</span>, <span class="number">80</span>);</span><br><span class="line">        lhmap.put(<span class="string">"Math"</span>,    <span class="number">85</span>);</span><br><span class="line">        lhmap.put(<span class="string">"English"</span>, <span class="number">90</span>);</span><br><span class="line">        lhmap.put(<span class="string">"Science"</span>, <span class="number">95</span>);</span><br><span class="line"></span><br><span class="line">        lhmap.get(<span class="string">"Math"</span>); <span class="comment">//通过get读取Math元素</span></span><br><span class="line"></span><br><span class="line">        Iterator iter = lhmap.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">            Map.Entry entry = (Map.Entry) iter.next();</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">" : "</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>输出结果：</p>
<blockquote>
<p>Chinese : 80<br>English : 90<br>Science : 95<br>Math : 85</p>
</blockquote>
<p>当通过get来获得某个元素后，get方法内部，会在最后通过<code>afterNodeAccess</code>方法来调整链表的指向它会自动会将这次访问的元素移至链表尾部，而在方法<code>afterNodeInsertion</code>中，只要满足条件，便移除最老的数据,即链表的head。不断访问可以形成按访问顺序排序的链表。</p>
<h2 id="使用LinkedHashMap构建线程安全的LRU缓存"><a href="#使用LinkedHashMap构建线程安全的LRU缓存" class="headerlink" title="使用LinkedHashMap构建线程安全的LRU缓存"></a>使用LinkedHashMap构建线程安全的LRU缓存</h2><p>　　哈希映射的迭代访问顺序很适合构建LRU缓存。当你为LinkedHashMap设置有限空间的时候，自然便完成了LRU Cache的效果。当然前提是，你必须重写一个方法<code>removeEldestEntry</code>,返回true。表示空间已满时，删除最老的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;K, V&gt; eldest)</span></span>&#123;     </span><br><span class="line">    <span class="keyword">return</span> size()&gt;capacity;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>　　LinkedHashMap类不是线程安全的，所以使用的时候需要加读写锁。下面构建一个线程安全的LRU缓存。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_LENGTH = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;  <span class="comment">//最大长度</span></span><br><span class="line">    <span class="keyword">private</span> LinkedHashMap&lt;K, V&gt; map;</span><br><span class="line">    <span class="keyword">private</span> ReadWriteLock lock = <span class="keyword">new</span> ReentrantReadWriteLock(); <span class="comment">//读写锁</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> initLength)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(initLength, MAX_LENGTH);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> initLength, <span class="keyword">int</span> maxLength)</span> </span>&#123;</span><br><span class="line">        MAX_LENGTH = maxLength;</span><br><span class="line">        map = <span class="keyword">new</span> LinkedHashMap&lt;K, V&gt;(initLength, <span class="number">0.75f</span>, <span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;K, V&gt; eldest)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> size() &gt; MAX_LENGTH;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 添加项</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> item  项</span><br><span class="line">     * <span class="doctag">@param</span> state 状态</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(K item, V state)</span> </span>&#123;</span><br><span class="line">        lock.writeLock().lock();</span><br><span class="line">        map.put(item, state);</span><br><span class="line">        lock.writeLock().unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 获取值,使用前请判断是否存在item</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> item 项</span><br><span class="line">     * <span class="doctag">@return</span> value 值</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">get</span><span class="params">(String item)</span> </span>&#123;</span><br><span class="line">        lock.readLock().lock();</span><br><span class="line">        V value = map.get(item);</span><br><span class="line">        lock.readLock().unlock();</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 是否存在</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> item 项</span><br><span class="line">     * <span class="doctag">@return</span> 是否存在</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(String item)</span> </span>&#123;</span><br><span class="line">        lock.readLock().lock();</span><br><span class="line">        <span class="keyword">boolean</span> isContainer = map.containsKey(item);</span><br><span class="line">        lock.readLock().unlock();</span><br><span class="line">        <span class="keyword">return</span> isContainer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 删除item</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> item 项</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(String item)</span> </span>&#123;</span><br><span class="line">        lock.writeLock().lock();</span><br><span class="line">        map.remove(item);</span><br><span class="line">        lock.writeLock().unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet()&#123;</span><br><span class="line">        <span class="keyword">return</span> map.entrySet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>现在测试一下缓存使用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LRUCache&lt;String,Integer&gt; cache = <span class="keyword">new</span> LRUCache&lt;String,Integer&gt;(<span class="number">5</span>,<span class="number">5</span>);</span><br><span class="line">        cache.put(<span class="string">"111"</span>,<span class="number">1</span>);</span><br><span class="line">        cache.put(<span class="string">"222"</span>,<span class="number">2</span>);</span><br><span class="line">        cache.put(<span class="string">"333"</span>,<span class="number">3</span>);</span><br><span class="line">        cache.put(<span class="string">"444"</span>,<span class="number">4</span>);</span><br><span class="line">        cache.put(<span class="string">"555"</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries=  cache.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry entry: entries)&#123;</span><br><span class="line">            String key = (String) entry.getKey();</span><br><span class="line">            Integer value = (Integer) entry.getValue();</span><br><span class="line">            System.out.println(key + <span class="string">" : "</span> + value);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"========================"</span>);</span><br><span class="line">        cache.put(<span class="string">"666"</span>,<span class="number">6</span>);</span><br><span class="line">        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries2=  cache.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry entry: entries2)&#123;</span><br><span class="line">            String key = (String) entry.getKey();</span><br><span class="line">            Integer value = (Integer) entry.getValue();</span><br><span class="line">            System.out.println(key + <span class="string">" : "</span> + value);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"========================"</span>);</span><br><span class="line">        cache.get(<span class="string">"333"</span>);</span><br><span class="line">        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries3=  cache.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry entry: entries3)&#123;</span><br><span class="line">            String key = (String) entry.getKey();</span><br><span class="line">            Integer value = (Integer) entry.getValue();</span><br><span class="line">            System.out.println(key + <span class="string">" : "</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>输出结果：</p>
<blockquote>
<p>111 : 1<br>222 : 2<br>333 : 3<br>444 : 4<br>555 : 5<br><em>========================</em><br>222 : 2<br>333 : 3<br>444 : 4<br>555 : 5<br>666 : 6<br><em>========================</em><br>222 : 2<br>444 : 4<br>555 : 5<br>666 : 6<br>333 : 3</p>
</blockquote>
<p>第一次向缓存中添加5个元素，已经达到缓存的最大空间。第二次再添加了一个元素<code>&quot;666&quot;,6</code>，缓存删掉了链表头部的<code>&quot;111&quot;,1</code>。第三次通过<code>get(&quot;333&quot;)</code>访问元素，缓存将其移动到链表末尾。这就是LRU的<code>最近最少使用</code>体现。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hive命令行使用]]></title>
      <url>https://laneypeng.github.io/2016/04/29/Hive%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题一"><a href="#三级标题一" class="headerlink" title="三级标题一"></a>三级标题一</h3><h3 id="三级标题二"><a href="#三级标题二" class="headerlink" title="三级标题二"></a>三级标题二</h3><h3 id="三级标题三"><a href="#三级标题三" class="headerlink" title="三级标题三"></a>三级标题三</h3><h2 id="二级标题二"><a href="#二级标题二" class="headerlink" title="二级标题二"></a>二级标题二</h2><h3 id="三级标题三-1"><a href="#三级标题三-1" class="headerlink" title="三级标题三"></a>三级标题三</h3><h3 id="三级标题四"><a href="#三级标题四" class="headerlink" title="三级标题四"></a>三级标题四</h3><h1 id="一级标题二"><a href="#一级标题二" class="headerlink" title="一级标题二"></a>一级标题二</h1>]]></content>
    </entry>
    
  
  
</search>
